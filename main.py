import asyncio, logging, re, requests, uuid
from datetime import datetime
from database import conn, cursor
from dateutil import parser

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.types.message import ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiocryptopay import AioCryptoPay, Networks, exceptions


class Form(StatesGroup):
    crypto = State()
    crypto_amount = State()
    stars = State()
    funpay = State()
    profile = State()

token = "7939037867:AAHhuUFYN0nSkbf2ktN4a2c-Ab-R2dVg5-A"
cryptobot_token = "340700:AAmEHzF9g2gXFP2p7N3hP1tiR689jFv0H5s"
funpay_token = "mbpfrrat3v251fj3tt31uvaq9citsu39"
admin_id_list =  ['1177915114']

#–±–æ—Ç —Ç–≥
logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher()

#–∫—Ä–∏–ø—Ç–æ–±–æ—Ç
crypto = AioCryptoPay(token=cryptobot_token, network=Networks.MAIN_NET)

@dp.message(F.text.in_([
    "/paysupport",
    "/start",
    "üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
    "üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
    "üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
]))
async def handle_commands_and_menu(message: types.Message):
    if message.text == "/paysupport":
        await message.answer("–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.")
    elif message.text == "/start":
        telegram_id = message.from_user.id
        cursor.execute("SELECT join_date FROM profiles WHERE telegram_id = ?", (telegram_id,))
        join_date = cursor.fetchone()
        if not join_date:
            join_date_str = message.date.strftime("%Y-%m-%d %H:%M:%S%z")
            join_date = parser.parse(join_date_str)
            formatted_join_date = join_date.strftime("%d-%m-%Y")
            cursor.execute("INSERT INTO profiles (id, telegram_id, join_date) VALUES (NULL, ?, ?)", (telegram_id, join_date_str))
            conn.commit()
        else:
            pass
        mainbutton = [
            [types.KeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
            [types.KeyboardButton(text="üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
            [types.KeyboardButton(text="üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=mainbutton,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é"
        )
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ yooma.su.\n–ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º", reply_markup=keyboard)
    if message.text == "üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        telegram_id = message.from_user.id
        cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
        profile_url = cursor.fetchone()
        if profile_url and profile_url[0]:
            inline_kb_list = [
                [
                    InlineKeyboardButton(text="‚≠êÔ∏è 1) –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏ (TG Stars)", callback_data='starsmethod_payment'),
                ],
                [
                    InlineKeyboardButton(text="ü™ô 2) –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (CryptoBot)", callback_data='cryptomethod_payment'),
                ],
                [
                    InlineKeyboardButton(text="üí≥ 3) –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ FunPay", callback_data='funpaymethod_payment'),
                ],
                [
                    InlineKeyboardButton(text="üìä 4) –ö—É—Ä—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", callback_data='deposit_rate')
                ]
            ]
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.", ignore_case=True, reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))
        else:
            await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)
    
    elif message.text == "üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        await message.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @anarchowitz", ignore_case=True)

    elif message.text == "üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        telegram_id = message.from_user.id
        cursor.execute("SELECT profile_url, join_date, purchases FROM profiles WHERE telegram_id = ?", (telegram_id,))
        profile_info = cursor.fetchone()
        if profile_info:
            profile_url, join_date_str, purchases_count = profile_info
            if join_date_str is not None:
                join_date = datetime.strptime(join_date_str, "%Y-%m-%d %H:%M:%S")
                formatted_join_date = join_date.strftime("%d-%m-%Y")
            else:
                formatted_join_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        else:
            profile_url = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            formatted_join_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            purchases_count = 0

        if profile_url is None:
            profile_url = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if purchases_count is None:
            purchases_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        inline_kb_list = [
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å", callback_data='change_profile_url')]
        ]
        await message.answer(f"""
        –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

        üÜî ID: {message.from_user.id}
        üë§ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile_url}

        ‚è≥ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: {formatted_join_date}
        üõí –°–¥–µ–ª–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: {purchases_count}


        """, ignore_case=True, reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))

@dp.callback_query(F.data == 'funpaymethod_payment')
async def funpaymethod_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?")
    await callback.answer()
    await state.set_state(Form.funpay)

@dp.message(Form.funpay, F.text.regexp(r'^\d+(\.\d+)?$'))
async def funpay_amount(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        try:
            insert_price = int(message.text)
            if insert_price < 150:
                await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 150 —Ä—É–±–ª–µ–π.")
                return
            inline_kb_list = [
                [
                    InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data='start_funpay'),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_funpay')
                ]
            ]
            await message.answer(f"üë§ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile_url[0]}\nüíµ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {insert_price}—Ä", reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))
            await state.update_data(insert_price=insert_price, profile_url=profile_url[0])
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)

@dp.callback_query(F.data == 'start_funpay')
async def start_funpay(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    insert_price = data.get('insert_price')
    profile_url = data.get('profile_url')
    telegram_id = callback.from_user.id
    await callback.message.answer("–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.")
    payment_id = str(uuid.uuid4().hex[:6])
    for i in range(0, len(admin_id_list)):
        admin_id = admin_id_list[0+i]
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"order_executed_{callback.message.chat.id}_{payment_id}"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"order_canceled_{callback.message.chat.id}_{payment_id}"),
                ],
                [InlineKeyboardButton(text="–£–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data=f"set_payment_link_{callback.message.chat.id}_{payment_id}")
                ]
            ]
        )
        await bot.send_message(admin_id, f"üë§ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –û—Ç: {callback.message.chat.id}. @{callback.from_user.username}\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: FUNPAY. –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {insert_price}—Ä\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - {profile_url}\nüìù ID –ø–ª–∞—Ç–µ–∂–∞: #{payment_id}", reply_markup=inline_kb)
    await callback.answer()
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–æ –Ω–∞—á–∞—Ç–æ", callback_data="unclickablebutton")]
        ]
    )
    await callback.message.edit_reply_markup(reply_markup=inline_kb)


@dp.callback_query(F.data.startswith("set_payment_link_"))
async def set_payment_link(callback: types.CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    chat_id = data_parts[3]
    payment_id = data_parts[4]
    await state.update_data(chat_id=chat_id, payment_id=payment_id)
    await bot.send_message(callback.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –±–∞–ª–∞–Ω—Å–∞:")

    @dp.message(F.text.startswith("https://funpay.com/lots/offer?id="))
    async def send_payment_link(message: types.Message, state: FSMContext):
        data = await state.get_data()
        chat_id = data.get('chat_id')
        payment_id = data.get('payment_id')
        await bot.send_message(callback.message.chat.id, f"–û—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {chat_id}, {payment_id}")
        await bot.send_message(chat_id, f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –±–∞–ª–∞–Ω—Å–∞: {message.text}", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_order_{payment_id}")]
            ]
        ))

@dp.callback_query(F.data.startswith("paid_order_"))
async def paid_order(callback: types.CallbackQuery):
    payment_id = callback.data.split("_")[2]
    await callback.message.answer("–í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –≤–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    chat_id = callback.message.chat.id
    for i in range(0, len(admin_id_list)):
        admin_id = admin_id_list[0+i]
        await bot.send_message(admin_id, f"üë§ –û—Ç: {callback.message.chat.id}. @{callback.from_user.username}. \n–û–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑\nüìù ID –ø–ª–∞—Ç–µ–∂–∞: #{payment_id}")
    
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ", callback_data="unclickablebutton")]
        ]
    )
    await callback.message.edit_reply_markup(reply_markup=inline_kb)
@dp.callback_query(F.data.startswith("order_canceled_"))
async def order_canceled(callback: types.CallbackQuery):
    data_parts = callback.data.split("_")
    chat_id = data_parts[2]
    payment_id = data_parts[3]
    await bot.send_message(callback.message.chat.id, f"–ó–∞–∫–∞–∑ (#{payment_id}) –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω")
    await bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.")
    await callback.answer()
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", callback_data="order_canceled_done")]
        ]
    )
    await callback.message.edit_reply_markup(reply_markup=inline_kb)

@dp.callback_query(F.data == 'cancel_funpay')
async def cancel_funpay(callback: types.CallbackQuery):
    await callback.answer()
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ", callback_data="unclickablebutton")]
        ]
    )
    await callback.message.edit_reply_markup(reply_markup=inline_kb)

@dp.callback_query(F.data == 'deposit_rate')
async def deposit_rate(callback: types.CallbackQuery):
    await callback.answer()
    rates = get_crypto_rates()
    rates['–ó–≤–µ–∑–¥–∞'] = 1.4
    message_text = "üìä –ö—É—Ä—Å –≤–∞–ª—é—Ç:\n\n"
    message_text += f"1 –ó–≤–µ–∑–¥–∞ = {rates['–ó–≤–µ–∑–¥–∞']} RUB\n\n"
    for currency, rate in rates.items():
        if currency != '–ó–≤–µ–∑–¥–∞':
            rate_int = int(rate)
            message_text += f"1 {currency} = {rate_int} RUB\n"
    await callback.message.answer(message_text)
    await callback.message.answer('\n–°–æ–≤–µ—Ç: –∑–≤–µ–∑–¥—ã –¥–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ https://fragment.com/stars/buy')

@dp.callback_query(F.data == 'cryptomethod_payment')
async def cryptomethod_payment(callback: types.CallbackQuery, state: FSMContext):
    inline_kb_list = [
        [
            InlineKeyboardButton(text="üìö–ì–∞–π–¥ –∫–∞–∫ –ø–æ–ø–æ–ª–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data="cryptoguide"),
        ],
        [
            InlineKeyboardButton(text="USDT", callback_data='USDT'),
            InlineKeyboardButton(text="TON", callback_data='TON'),
            InlineKeyboardButton(text="BTC", callback_data='BTC'),
        ],
        [
            InlineKeyboardButton(text="DOGE", callback_data='DOGE'),
            InlineKeyboardButton(text="LTC", callback_data='LTC'),
            InlineKeyboardButton(text="ETH", callback_data='ETH'),
        ],
        [
            InlineKeyboardButton(text="BNB", callback_data='BNB'),
            InlineKeyboardButton(text="TRX", callback_data='TRX'),
            InlineKeyboardButton(text="USDC", callback_data='USDC'),
        ]
    ]
    await callback.message.answer("–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))
    await state.set_state(Form.crypto)

@dp.callback_query(F.data == 'cryptoguide')
async def crypto_guide(callback: types.CallbackQuery):
    await callback.message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥ -> https://teletype.in/@anarchowitz/yoomapay_crypto")

@dp.callback_query(F.data.in_(['USDT', 'TON', 'BTC', 'DOGE', 'LTC', 'ETH', 'BNB', 'TRX', 'USDC']))
async def crypto_currency(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?")
    await state.update_data(crypto_currency=callback.data)
    await state.set_state(Form.crypto_amount)

@dp.message(Form.crypto_amount, F.text.regexp(r'^\d+(\.\d+)?$'))
async def crypto_amount(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        try:
            insert_price = float(message.text)
            data = await state.get_data()
            crypto_currency = data.get('crypto_currency')
            try:
                invoice = await crypto.create_invoice(asset=crypto_currency, amount=insert_price, allow_anonymous=False, allow_comments=False, hidden_message="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @anarchowitz")
            except exceptions.CodeErrorFactory as e:
                if e.code == 400:
                    await message.answer("‚ö†Ô∏è –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                else:
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            pay_url = invoice.bot_invoice_url
            invoice_id = invoice.invoice_id
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="cryptocheck_payments")]
                ]
            )
            await message.answer(f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {insert_price} {crypto_currency}\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: \n{pay_url}", reply_markup=inline_kb)
            await state.update_data(invoice_id=invoice_id, insert_price=insert_price)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)
@dp.callback_query(F.data == 'cryptocheck_payments')
async def cryptocheck_payments(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    invoice_id = data.get('invoice_id')
    insert_price = data.get('insert_price')
    crypto_currency = data.get('crypto_currency')
    telegram_id = callback.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    status = await get_invoice(invoice_id)
    if status == 'paid':
        await callback.message.reply("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await bot.send_message(callback.message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–¥–∞—á—É –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.")
        crypto_rates = get_crypto_rates()
        rub_amount = insert_price * crypto_rates[crypto_currency]
        for i in range(0, len(admin_id_list)):
            admin_id = admin_id_list[0+i]
            inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑", callback_data=f"order_executed_{callback.message.chat.id}")]
                ]
            )
            await bot.send_message(admin_id, f"üë§ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –û—Ç: {callback.message.chat.id}. @{callback.from_user.username}\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: CRYPTO BOT. –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {insert_price} {crypto_currency} ({rub_amount:.2f}—Ä)\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - {profile_url[0]}", reply_markup=inline_kb)
        
        cursor.execute("UPDATE profiles SET purchases = purchases + 1 WHERE telegram_id = ?", (telegram_id,))
        conn.commit()
        
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", callback_data="payment_success")]
            ]
        )
        await callback.message.edit_reply_markup(reply_markup=inline_kb)
    else:
        await callback.message.reply("–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

async def get_invoice(id):
    returned = await crypto.get_invoices(invoice_ids=id)
    return str(returned.status)

@dp.callback_query(F.data == 'starsmethod_payment')
async def starsmethod_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?")
    await state.set_state(Form.stars)

@dp.message(Form.stars, F.text.regexp(r'^\d+$'))
async def stars_payment(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        try:
            insert_price = int(message.text)
            if insert_price > 100000:
                await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100.000 –∑–≤–µ–∑–¥.")
                return
            elif insert_price < 1:
                await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 1 –∑–≤–µ–∑–¥–∞.")
                return
            price_per_star = 1.3  # —Ü–µ–Ω–∞ –∑–∞ –∑–≤–µ–∑–¥—É –≤ —Ä—É–±–ª—è—Ö
            stars_amount = insert_price * price_per_star
            builder = InlineKeyboardBuilder()  
            builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {insert_price}‚≠êÔ∏è", pay=True)  
            await message.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞: {insert_price} –∑–≤–µ–∑–¥\n({stars_amount:.2f}—Ä) ")
            prices = [LabeledPrice(label="XTR", amount=insert_price)]
            await bot.send_invoice(
                chat_id=message.chat.id,
                title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ yooma.su",  
                description=f"–ü—Ä–æ—Ñ–∏–ª—å - {profile_url[0]}",  
                provider_token="",  
                currency="XTR",  
                prices=prices,  
                start_parameter="channel_support",  
                payload="channel_support",  
                reply_markup=builder.as_markup(),
            )
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):  
    await pre_checkout_query.answer(ok=True)

@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    payment_amount = message.successful_payment.total_amount
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    price_per_star = 1.4
    rub_amount = int(payment_amount) * price_per_star
    await bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–¥–∞—á—É –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.")
    for i in range(0, len(admin_id_list)):
        admin_id = admin_id_list[0+i]
        inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑", callback_data=f"order_executed_{message.chat.id}")]
            ]
        )
        await bot.send_message(admin_id, f"üë§ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –û—Ç: {message.chat.id}. @{message.from_user.username}\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: TG STARS. –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {payment_amount}‚≠êÔ∏è ({rub_amount:.2f}—Ä)\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - {profile_url[0]}", reply_markup=inline_kb)
    
    cursor.execute("UPDATE profiles SET purchases = purchases + 1 WHERE telegram_id = ?", (telegram_id,))
    conn.commit()

@dp.callback_query(F.data.startswith("order_executed_"))
async def order_executed(callback: types.CallbackQuery):
    chat_id = callback.data.split("_")[2]
    await bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å")
    await bot.send_message(chat_id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ —Ñ–∞–Ω–ø–µ–π! –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã!")
    await callback.answer()
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data="unclickablebutton")]
        ]
    )
    
    await callback.message.edit_reply_markup(reply_markup=inline_kb)
    
@dp.callback_query(F.data == 'change_profile_url')
async def change_profile_url(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://yooma.su/ru/profile/anarchowitz2\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    @dp.message(F.text.startswith("https://yooma.su/ru/profile/") or F.text.startswith("https://yooma.su/en/profile/"))
    async def update_profile_url(message: types.Message):
        telegram_id = message.from_user.id
        profile_url = message.text
        update_profile(telegram_id, profile_url)
        await message.answer("–û–±–Ω–æ–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.", ignore_case=True)

def update_profile(telegram_id, profile_url):
    cursor.execute('''
        UPDATE profiles
        SET profile_url = ?
        WHERE telegram_id = ?
    ''', (profile_url, telegram_id))
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO profiles (id, telegram_id, profile_url)
            VALUES (NULL, ?, ?)
        ''', (telegram_id, profile_url))
    conn.commit()

def get_crypto_rates():
    api_key = "a47a4eaf-1eab-4867-805f-6d9fd5a45b20"
    api_url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
    params = {
        "symbol": ",".join(['USDT', 'TON', 'BTC', 'DOGE', 'LTC', 'ETH', 'BNB', 'TRX', 'USDC']),
        "convert": "RUB"
    }
    headers = {
        "Accepts": "application/json",
        "X-CMC_PRO_API_KEY": api_key
    }
    response = requests.get(api_url, params=params, headers=headers)
    data = response.json()
    rates = {}
    if 'data' in data:
        for symbol in data["data"]:
            rates[symbol] = data["data"][symbol]["quote"]["RUB"]["price"]
    else:
        print("–û—à–∏–±–∫–∞: –∫–ª—é—á 'data' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
    return rates

@dp.message(F.text.regexp(r'^(?!https?://(yooma\.su|funpay\.com)/?.*)$'))
async def echo(message: types.Message):
    mainbutton = [
        [types.KeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [types.KeyboardButton(text="üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [types.KeyboardButton(text="üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=mainbutton,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é"
    )
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!\n–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=keyboard)

async def main():
    try:
        await bot.delete_webhook(True)
        await dp.start_polling(bot, timeout=30)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
    