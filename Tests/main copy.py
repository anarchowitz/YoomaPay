import asyncio, logging, re, requests

from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, PreCheckoutQuery
from aiogram.types.message import ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database import conn, cursor


class Form(StatesGroup):
    crypto = State()
    stars = State()
    profile = State()

token = "7939037867:AAHhuUFYN0nSkbf2ktN4a2c-Ab-R2dVg5-A"
admin_id_list =  ['1177915114', '947603836']
parameters = {
    "token": "30283:AAAtUrEajzoZQX0iYjC58NJtTbfL520Q0Us",
    "api_url": "https://testnet-pay.crypt.bot/"
}

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher()


class CryptoPay(object):
    def __init__(self, user_id, parameters) -> None:
        self.token = parameters['token']
        self.api_url = parameters['api_url']
        self.user_id = user_id
        self.headers = {
            "Crypto-Pay-API-Token": self.token
        }
        pass
    def get_me(self):
        getMe_url = f"{self.api_url}api/getMe"
        try:
            app_info = requests.get(getMe_url, headers = self.headers).json()
            return app_info
        except:
            return False
    def create_invoice(self, amount, asset='TON', description=None, hidden_message='–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', expires_in=86400, allow_anonymous=False, allow_comments=False):
        payload = self.user_id
        invoice_url = f"{self.api_url}api/createInvoice"
        params = {
            "asset": asset,
            "amount": amount,
            "payload": payload,
            "hidden_message": hidden_message,
            "expires_in": expires_in,
            "allow_anonymous": allow_anonymous,
            "allow_comments": allow_comments
        }
        if description:
            params["description"] = description
        try:
            invoice_info = requests.get(invoice_url, headers=self.headers, params=params).json()
            return invoice_info
        except:
            return False
    def get_all_invoices(self):
        invoices_url = f"{self.api_url}api/getInvoices"
        invoice_info = requests.get(invoices_url, headers = self.headers).json()
        return invoice_info
        return False
    def get_invoice(self, invoice_id):
        invoices_list = self.get_all_invoices()
        if invoices_list:
            return [invoice for invoice in invoices_list["result"]["items"] if invoice["invoice_id"] == invoice_id]
        else:
            return False
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("paysupport"))
async def pay_support_handler(message: types.Message):  
    await message.answer(  
        text="–î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, "  
        "–æ–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã –æ—á–µ–Ω—å —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.")
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT join_date FROM profiles WHERE telegram_id = ?", (telegram_id,))
    join_date = cursor.fetchone()
    if not join_date:
        cursor.execute("INSERT INTO profiles (id, telegram_id, join_date) VALUES (NULL, ?, ?)", (telegram_id, message.date))
        conn.commit()
    else:
        pass
    
    mainbutton = [
        [types.KeyboardButton(text="üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [types.KeyboardButton(text="üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [types.KeyboardButton(text="üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=mainbutton,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é"
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ yooma.su.\n–ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º", reply_markup=keyboard)
#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@dp.message(F.text == "üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def echo(message: types.Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        inline_kb_list = [
            [
                InlineKeyboardButton(text="‚≠êÔ∏è 1) –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏ (TG Stars)", callback_data='starsmethod_payment'),
                InlineKeyboardButton(text="üí∏ 2) –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (–ß–µ–∫/–ü–µ—Ä–µ–≤–æ–¥)", callback_data='cryptomethod_payment')
            ]
        ]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.", ignore_case=True, reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)

@dp.callback_query(F.data == 'cryptomethod_payment')
async def cryptomethod_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?")
    await callback.answer()
    await state.set_state(Form.crypto)

@dp.message(Form.crypto)
async def crypto_payment(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        try:
            insert_price = float(re.search(r'\d+(?:\.\d+)?', message.text).group())
            cryptopay = CryptoPay(telegram_id, parameters)
            invoice_info = cryptopay.create_invoice(amount=insert_price, asset='DOGE')
            pay_url = invoice_info['result']['pay_url']
            await message.answer(f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {insert_price} DOGE\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: \n{pay_url}")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)

@dp.callback_query(F.data == 'starsmethod_payment')
async def starsmethod_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?")
    await callback.answer()
    await state.set_state(Form.stars)

@dp.message(Form.stars, F.text.regexp(r'^\d+$'))
async def stars_payment(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    if profile_url and profile_url[0]:
        try:
            insert_price = int(message.text)
            price_per_star = 1.3  # —Ü–µ–Ω–∞ –∑–∞ –∑–≤–µ–∑–¥—É –≤ —Ä—É–±–ª—è—Ö
            stars_amount = insert_price * price_per_star
            builder = InlineKeyboardBuilder()  
            builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {insert_price}‚≠êÔ∏è", pay=True)  
            await message.answer(f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞: {insert_price} –∑–≤–µ–∑–¥\n({stars_amount:.2f}—Ä) ")
            prices = [LabeledPrice(label="XTR", amount=insert_price)]
            await bot.send_invoice(
                chat_id=message.chat.id,
                title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ yooma.su",  
                description=f"–ü—Ä–æ—Ñ–∏–ª—å - {profile_url[0]}",  
                provider_token="",  
                currency="XTR",  
                prices=prices,  
                start_parameter="channel_support",  
                payload="channel_support",  
                reply_markup=builder.as_markup(),
            )
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"', ignore_case=True)

@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):  
    await pre_checkout_query.answer(ok=True)

@dp.message(F.successful_payment)
async def process_successful_payment(message: types.Message):
    payment_amount = message.successful_payment.total_amount
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_url = cursor.fetchone()
    price_per_star = 1.3
    rub_amount = int(payment_amount) * price_per_star
    await bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –≤—ã–¥–∞—á—É –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫.")
    for i in range(0, len(admin_id_list)):
        admin_id = admin_id_list[0+i]
        inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑", callback_data=f"order_executed_{message.chat.id}")]
            ]
        )
        await bot.send_message(admin_id, f"üë§ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞. –û—Ç: {message.chat.id}. @{message.from_user.username}\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: TG STARS. –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {payment_amount}‚≠êÔ∏è ({rub_amount:.2f}—Ä)\nüåê –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å - {profile_url[0]}", reply_markup=inline_kb)
    
    cursor.execute("UPDATE profiles SET purchases = purchases + 1 WHERE telegram_id = ?", (telegram_id,))
    conn.commit()

@dp.callback_query(F.data.startswith("order_executed_"))
async def order_executed(callback: types.CallbackQuery):
    chat_id = callback.data.split("_")[2]
    await bot.send_message(chat_id, "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å")
    await callback.answer()
    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data="order_executed_done")]
        ]
    )
    await callback.message.edit_reply_markup(reply_markup=inline_kb)

@dp.message(F.text == "üÜò–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def echo(message: types.Message):
    await message.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è @anarchowitz", ignore_case=True)
@dp.message(F.text == "üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def echo(message: types.Message):
    telegram_id = message.from_user.id
    cursor.execute("SELECT profile_url, join_date, purchases FROM profiles WHERE telegram_id = ?", (telegram_id,))
    profile_info = cursor.fetchone()
    if profile_info:
        profile_url, join_date_str, purchases_count = profile_info
        if join_date_str is not None:
            join_date = datetime.strptime(join_date_str, "%Y-%m-%d %H:%M:%S%z")
            formatted_join_date = join_date.strftime("%d-%m-%Y")
        else:
            formatted_join_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        profile_url = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        formatted_join_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        purchases_count = 0

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è profile_url
    if profile_url is None:
        profile_url = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if purchases_count is None:
        purchases_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    inline_kb_list = [
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å", callback_data='change_profile_url')],
    ]
    await message.answer(f"""
    –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
                             

    üÜî ID: {message.from_user.id}
    üë§ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile_url}

    ‚è≥ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å: {formatted_join_date}
    üõí –°–¥–µ–ª–∞–Ω–æ –ø–æ–∫—É–ø–æ–∫: {purchases_count}


    """, ignore_case=True, reply_markup=InlineKeyboardMarkup(inline_keyboard=inline_kb_list))
    
@dp.callback_query(F.data == 'change_profile_url')
async def change_profile_url(callback: types.CallbackQuery):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: https://yooma.su/profile/anarchowitz\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
    @dp.message(F.text.startswith("https://yooma.su/profile/"))
    async def update_profile_url(message: types.Message):
        telegram_id = message.from_user.id
        profile_url = message.text
        update_profile(telegram_id, profile_url)
        await message.answer("–û–±–Ω–æ–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.", ignore_case=True)
        await echo(message)

def update_profile(telegram_id, profile_url):
    cursor.execute('''
        UPDATE profiles
        SET profile_url = ?
        WHERE telegram_id = ?
    ''', (profile_url, telegram_id))
    if cursor.rowcount == 0:
        cursor.execute('''
            INSERT INTO profiles (id, telegram_id, profile_url)
            VALUES (NULL, ?, ?)
        ''', (telegram_id, profile_url))
    conn.commit()


async def main():
    await bot.delete_webhook(True)
    await dp.start_polling(bot, timeout=30)

if __name__ == "__main__":
    asyncio.run(main())
    